{"version":3,"sources":["../../src/schema/build-node-connections.js"],"names":["_","require","connectionArgs","connectionDefinitions","GraphQLInputObjectType","inferInputObjectStructureFromNodes","inferInputObjectStructureFromFields","createSortField","buildConnectionFields","getNodesByType","createPageDependency","connectionFromArray","handleQueryResult","results","resolveArgs","queryArgs","path","length","connection","totalCount","internal","connectionType","edges","node","type","module","exports","types","connections","each","name","nodes","typeName","nodeType","nodeObjectType","connectionFields","typeConnection","inferredInputFieldsFromNodes","inferredInputFieldsFromPlugins","fields","fieldsFromPlugins","filterFields","merge","inferredFields","sortNames","sort","concat","camelCase","description","args","filter","resolve","object","b","rootValue","runSift","latestNodes","firstOnly"],"mappings":"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","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst { connectionArgs, connectionDefinitions } = require(`graphql-skip-limit`)\nconst { GraphQLInputObjectType } = require(`graphql`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst createSortField = require(`./create-sort-field`)\nconst buildConnectionFields = require(`./build-connection-fields`)\nconst { getNodesByType } = require(`../db/nodes`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst { connectionFromArray } = require(`graphql-skip-limit`)\n\nfunction handleQueryResult({ results, resolveArgs: queryArgs, path }) {\n  if (results && results.length) {\n    const connection = connectionFromArray(results, queryArgs)\n    connection.totalCount = results.length\n\n    if (results[0].internal) {\n      const connectionType = connection.edges[0].node.internal.type\n      createPageDependency({\n        path,\n        connection: connectionType,\n      })\n    }\n    return connection\n  } else {\n    return null\n  }\n}\n\nmodule.exports = (types: any) => {\n  const connections = {}\n\n  _.each(types, (type /* , fieldName*/) => {\n    // Don't create a connection for the Site node since there can only be one\n    // of them.\n    if (type.name === `Site`) {\n      return\n    }\n    const nodes = type.nodes\n    const typeName = `${type.name}Connection`\n    const { connectionType: typeConnection } = connectionDefinitions({\n      nodeType: type.nodeObjectType,\n      connectionFields: () => buildConnectionFields(type),\n    })\n\n    const inferredInputFieldsFromNodes = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: type.fieldsFromPlugins,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferredInputFieldsFromNodes.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n    const sortNames = inferredInputFieldsFromNodes.sort.concat(\n      inferredInputFieldsFromPlugins.sort\n    )\n    const sort = createSortField(typeName, sortNames)\n\n    connections[_.camelCase(`all ${type.name}`)] = {\n      type: typeConnection,\n      description: `Connection to all ${type.name} nodes`,\n      args: {\n        ...connectionArgs,\n        sort,\n        filter: {\n          type: new GraphQLInputObjectType({\n            name: _.camelCase(`filter ${type.name}`),\n            description: `Filter connection on its fields`,\n            fields: () => filterFields,\n          }),\n        },\n      },\n      async resolve(object, resolveArgs, b, { rootValue }) {\n        let path\n        if (typeof rootValue !== `undefined`) {\n          path = rootValue.path\n        }\n        const runSift = require(`./run-sift`)\n        const latestNodes = getNodesByType(type.name)\n        const results = await runSift({\n          args: resolveArgs,\n          nodes: latestNodes,\n          firstOnly: false,\n          typeName: typeName,\n          type: type.node.type,\n        })\n        return handleQueryResult({ results, resolveArgs, path })\n      },\n    }\n  })\n\n  return connections\n}\n"],"file":"build-node-connections.js"}