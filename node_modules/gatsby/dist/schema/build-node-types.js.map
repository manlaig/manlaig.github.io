{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","tracer","globalTracer","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromFields","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","pageDependencyResolver","setFileNodeRootType","clearTypeExampleValues","runQuery","run","lazyFields","defaultNodeFields","id","type","description","parent","resolve","node","children","map","groupChildNodesByType","nodes","flatMap","groupBy","internal","camelCase","undefined","value","nodeIsOfType","typeName","makeChildrenResolver","filter","buildChildrenFieldConfigMap","nodeObjectType","fieldName","fieldConfig","makeChildResolver","find","buildChildFieldConfigMap","inferChildFieldConfigMap","processedTypes","maxChildCount","maxBy","values","c","g","length","inferChildFields","childNodesByType","configMaps","assign","apply","inferFields","pluginFields","childFields","inferredFields","types","ignoreFields","Object","keys","buildResolver","gqlType","a","queryArgs","isObject","results","firstOnly","buildNodeObjectType","name","interfaces","fields","isTypeOf","buildProcessedType","span","intermediateType","traceId","parentSpan","mergedFieldsFromPlugins","merge","pluginInputFields","each","add","nodeInputFields","filterFields","fieldsFromPlugins","args","groupNodesByType","ignoreType","buildAll","spanArgs","childOf","startSpan","Promise","all","processedType","finish","module","exports"],"mappings":"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","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n} = require(`graphql`)\nconst tracer = require(`opentracing`).globalTracer()\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode } = require(`../db/nodes`)\nconst pageDependencyResolver = require(`./page-dependency-resolver`)\nconst { setFileNodeRootType } = require(`./types/type-file`)\nconst { clearTypeExampleValues } = require(`./data-tree-utils`)\nconst { run: runQuery } = require(`../db/nodes-query`)\nconst lazyFields = require(`./lazy-fields`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = {\n  [typeName: string]: ProcessedNodeType,\n}\n\nconst defaultNodeFields = {\n  id: {\n    type: new GraphQLNonNull(GraphQLID),\n    description: `The id of this node.`,\n  },\n  parent: {\n    type: nodeInterface,\n    description: `The parent of this node.`,\n    resolve: pageDependencyResolver(node => getNode(node.parent)),\n  },\n  children: {\n    type: new GraphQLList(nodeInterface),\n    description: `The children of this node.`,\n    resolve: pageDependencyResolver(node => node.children.map(getNode)),\n  },\n}\n\nfunction groupChildNodesByType(nodes) {\n  return _(nodes)\n    .flatMap(node => node.children.map(getNode))\n    .groupBy(\n      node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n    )\n    .value()\n}\n\nfunction nodeIsOfType(typeName) {\n  return node => _.camelCase(node.internal.type) === typeName\n}\n\nfunction makeChildrenResolver(typeName) {\n  return node => node.children.map(getNode).filter(nodeIsOfType(typeName))\n}\n\nfunction buildChildrenFieldConfigMap(typeName, nodeObjectType) {\n  const fieldName = _.camelCase(`children ${typeName}`)\n  const fieldConfig = {\n    type: new GraphQLList(nodeObjectType),\n    description: `The children of this node of type ${typeName}`,\n    resolve: pageDependencyResolver(makeChildrenResolver(typeName)),\n  }\n  return { [fieldName]: fieldConfig }\n}\n\nfunction makeChildResolver(typeName) {\n  return node => node.children.map(getNode).find(nodeIsOfType(typeName))\n}\n\nfunction buildChildFieldConfigMap(typeName, nodeObjectType) {\n  const fieldName = _.camelCase(`child ${typeName}`)\n  const fieldConfig = {\n    type: nodeObjectType,\n    description: `The child of this node of type ${typeName}`,\n    resolve: pageDependencyResolver(makeChildResolver(typeName)),\n  }\n  return { [fieldName]: fieldConfig }\n}\n\nfunction inferChildFieldConfigMap(type, typeName, processedTypes) {\n  const { nodeObjectType } = processedTypes[typeName]\n  // Does this child type have one child per parent or multiple?\n  const maxChildCount = _.maxBy(\n    _.values(_.groupBy(type, c => c.parent)),\n    g => g.length\n  ).length\n\n  if (maxChildCount > 1) {\n    return buildChildrenFieldConfigMap(typeName, nodeObjectType)\n  } else {\n    return buildChildFieldConfigMap(typeName, nodeObjectType)\n  }\n}\n\nfunction inferChildFields(nodes, processedTypes) {\n  // Create children fields for each type of children e.g.\n  // \"childrenMarkdownRemark\".\n  const childNodesByType = groupChildNodesByType(nodes)\n\n  const configMaps = _.map(childNodesByType, (type, typeName) =>\n    inferChildFieldConfigMap(type, typeName, processedTypes)\n  )\n  return _.assign.apply(null, [{}, ...configMaps])\n}\n\nfunction inferFields({ nodes, pluginFields, processedTypes }) {\n  // Create children fields for each type of children e.g.\n  // \"childrenMarkdownRemark\".\n  const childFields = inferChildFields(nodes, processedTypes)\n\n  const inferredFields = inferObjectStructureFromNodes({\n    nodes,\n    types: _.values(processedTypes),\n    ignoreFields: Object.keys(pluginFields),\n  })\n\n  return {\n    ...defaultNodeFields,\n    ...childFields,\n    ...inferredFields,\n    ...pluginFields,\n  }\n}\n\nfunction buildResolver(gqlType) {\n  return async (a, queryArgs) => {\n    if (!_.isObject(queryArgs)) {\n      queryArgs = {}\n    }\n\n    const results = await runQuery({\n      queryArgs: {\n        filter: {\n          ...queryArgs,\n        },\n      },\n      firstOnly: true,\n      gqlType,\n    })\n\n    if (results.length > 0) {\n      return results[0]\n    } else {\n      return null\n    }\n  }\n}\n\nfunction buildNodeObjectType({\n  typeName,\n  nodes,\n  pluginFields,\n  processedTypes,\n}) {\n  return new GraphQLObjectType({\n    name: typeName,\n    description: `Node of type ${typeName}`,\n    interfaces: [nodeInterface],\n    fields: () => inferFields({ nodes, pluginFields, processedTypes }),\n    isTypeOf: value => value.internal.type === typeName,\n  })\n}\n\nasync function buildProcessedType({ nodes, typeName, processedTypes, span }) {\n  const intermediateType = {}\n\n  intermediateType.name = typeName\n  intermediateType.nodes = nodes\n\n  const pluginFields = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n    type: intermediateType,\n    traceId: `initial-setFieldsOnGraphQLNodeType`,\n    parentSpan: span,\n  })\n\n  const mergedFieldsFromPlugins = _.merge(...pluginFields)\n\n  const pluginInputFields = inferInputObjectStructureFromFields({\n    fields: mergedFieldsFromPlugins,\n  })\n  _.each(pluginInputFields.inferredFields, (fieldConfig, fieldName) => {\n    lazyFields.add(typeName, fieldName)\n  })\n\n  const gqlType = buildNodeObjectType({\n    typeName,\n    nodes,\n    pluginFields: mergedFieldsFromPlugins,\n    processedTypes,\n  })\n\n  const nodeInputFields = inferInputObjectStructureFromNodes({\n    nodes,\n    typeName,\n  })\n\n  const filterFields = _.merge(\n    {},\n    nodeInputFields.inferredFields,\n    pluginInputFields.inferredFields\n  )\n\n  return {\n    ...intermediateType,\n    fieldsFromPlugins: mergedFieldsFromPlugins,\n    nodeObjectType: gqlType,\n    node: {\n      name: typeName,\n      type: gqlType,\n      args: filterFields,\n      resolve: pageDependencyResolver(buildResolver(gqlType)),\n    },\n  }\n}\n\nfunction groupNodesByType(nodes) {\n  return _.groupBy(\n    nodes.filter(node => node.internal && !node.internal.ignoreType),\n    node => node.internal.type\n  )\n}\n\nasync function buildAll({ parentSpan }) {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n\n  const types = groupNodesByType(getNodes())\n  const processedTypes: TypeMap = {}\n\n  clearTypeExampleValues()\n\n  // Reset stored File type to not point to outdated type definition\n  setFileNodeRootType(null)\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(\n    _.map(types, async (nodes, typeName) => {\n      const fieldName = _.camelCase(typeName)\n      const processedType = await buildProcessedType({\n        nodes,\n        typeName,\n        processedTypes,\n        span,\n      })\n      processedTypes[fieldName] = processedType\n      // Special case to construct linked file type used by type inferring\n      if (typeName === `File`) {\n        setFileNodeRootType(processedType.nodeObjectType)\n      }\n      return\n    })\n  )\n\n  span.finish()\n\n  return processedTypes\n}\n\nmodule.exports = {\n  buildProcessedType,\n  buildNodeObjectType,\n  buildAll,\n}\n"],"file":"build-node-types.js"}