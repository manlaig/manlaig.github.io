{"version":3,"sources":["../../src/schema/infer-graphql-type.js"],"names":["require","GraphQLObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLUnionType","_","invariant","oneLine","store","getNode","getNodes","getNodesByType","createPageDependency","createTypeName","createKey","getExampleValues","isEmptyObjectOrArray","INVALID_VALUE","DateType","FileType","is32BitInteger","unionTypes","Map","inferGraphQLType","exampleValue","selector","nodes","types","otherArgs","fieldName","split","pop","shouldInfer","isArray","getListType","getType","Array","inferredType","type","args","resolve","listType","object","context","resolveInfo","fieldValue","map","value","name","fields","_inferObjectStructureFromNodes","inferFromMapping","mapping","fieldSelector","linkedType","linkedField","slice","length","matchedTypes","filter","isEmpty","console","log","findNode","path","linkedNode","find","n","get","nodeId","id","nodeObjectType","node","a","b","findLinkedNode","inferFromFieldName","uniqBy","v","internal","key","validateLinkedNode","validateField","field","findNodeType","linkedNodes","forEach","i","typeName","f","sort","join","has","description","resolveType","data","set","result","EXCLUDE_KEYS","parent","children","ignoreFields","config","getState","isRoot","resolvedExample","inferredFields","each","nextSelector","inferredField","includes","Object","keys","sanitizedFieldName","fieldResolve","inferredFieldWithoutResolve","source","inferObjectStructureFromNodes","options","clearUnionTypes","clear"],"mappings":"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","sourcesContent":["// @flow\nconst {\n  GraphQLObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLUnionType,\n} = require(`graphql`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst { oneLine } = require(`common-tags`)\n\nconst { store } = require(`../redux`)\nconst { getNode, getNodes, getNodesByType } = require(`../db/nodes`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  getExampleValues,\n  isEmptyObjectOrArray,\n  INVALID_VALUE,\n} = require(`./data-tree-utils`)\nconst DateType = require(`./types/type-date`)\nconst FileType = require(`./types/type-file`)\nconst is32BitInteger = require(`../utils/is-32-bit-integer`)\nconst unionTypes = new Map()\n\nimport type { GraphQLOutputType } from \"graphql\"\nimport type {\n  GraphQLFieldConfig,\n  GraphQLFieldConfigMap,\n} from \"graphql/type/definition\"\n\nexport type ProcessedNodeType = {\n  name: string,\n  nodes: any[],\n  node: GraphQLFieldConfig<*, *>,\n  fieldsFromPlugins: any,\n  nodeObjectType: GraphQLOutputType,\n}\n\nfunction inferGraphQLType({\n  exampleValue,\n  selector,\n  nodes,\n  types,\n  ...otherArgs\n}): ?GraphQLFieldConfig<*, *> {\n  if (exampleValue == null || isEmptyObjectOrArray(exampleValue)) return null\n  let fieldName = selector.split(`.`).pop()\n\n  // Check this before checking for array as FileType has\n  // builtin support for inferring array of files and inferred\n  // array type will have faster resolver than resolving array\n  // of files separately.\n  if (FileType.shouldInfer(nodes, selector, exampleValue)) {\n    return _.isArray(exampleValue) ? FileType.getListType() : FileType.getType()\n  }\n\n  if (Array.isArray(exampleValue)) {\n    exampleValue = exampleValue[0]\n\n    if (exampleValue == null) return null\n\n    let inferredType = inferGraphQLType({\n      ...otherArgs,\n      exampleValue,\n      selector,\n      nodes,\n      types,\n    })\n    invariant(\n      inferredType,\n      `Could not infer graphQL type for value: ${exampleValue}`\n    )\n\n    const { type, args = null, resolve = null } = inferredType\n\n    const listType = { type: new GraphQLList(type), args }\n\n    if (resolve) {\n      // If inferredType has resolve function wrap it with Array.map\n      listType.resolve = (object, args, context, resolveInfo) => {\n        const fieldValue = object[fieldName]\n        if (!fieldValue) {\n          return null\n        }\n\n        // Field resolver expects first parameter to be plain object\n        // containing key with name of field we want to resolve.\n        return fieldValue.map(value =>\n          resolve({ [fieldName]: value }, args, context, resolveInfo)\n        )\n      }\n    }\n\n    return listType\n  }\n\n  if (\n    // momentjs crashes when it encounters a Symbol,\n    // so check against that\n    typeof exampleValue !== `symbol` &&\n    DateType.shouldInfer(exampleValue)\n  ) {\n    return DateType.getType()\n  }\n\n  switch (typeof exampleValue) {\n    case `boolean`:\n      return { type: GraphQLBoolean }\n    case `string`:\n      return { type: GraphQLString }\n    case `object`:\n      return {\n        type: new GraphQLObjectType({\n          name: createTypeName(fieldName),\n          fields: _inferObjectStructureFromNodes(\n            {\n              ...otherArgs,\n              selector,\n              nodes,\n              types,\n            },\n            exampleValue\n          ),\n        }),\n      }\n    case `number`:\n      return is32BitInteger(exampleValue)\n        ? { type: GraphQLInt }\n        : { type: GraphQLFloat }\n    default:\n      return null\n  }\n}\n\nfunction inferFromMapping(\n  value,\n  mapping,\n  fieldSelector,\n  types\n): ?GraphQLFieldConfig<*, *> {\n  const linkedType = mapping[fieldSelector].split(`.`)[0]\n  const linkedField =\n    mapping[fieldSelector].slice(linkedType.length + 1) || `id`\n\n  const matchedTypes = types.filter(type => type.name === linkedType)\n  if (_.isEmpty(matchedTypes)) {\n    console.log(`Couldn't find a matching node type for \"${fieldSelector}\"`)\n    return null\n  }\n\n  const findNode = (fieldValue, path) => {\n    const linkedNode = _.find(\n      getNodesByType(linkedType),\n      n => _.get(n, linkedField) === fieldValue\n    )\n    if (linkedNode) {\n      createPageDependency({ path, nodeId: linkedNode.id })\n      return linkedNode\n    }\n    return null\n  }\n\n  if (_.isArray(value)) {\n    return {\n      type: new GraphQLList(matchedTypes[0].nodeObjectType),\n      resolve: (node, a, b, { fieldName }) => {\n        const fieldValue = node[fieldName]\n\n        if (fieldValue) {\n          return fieldValue.map(value => findNode(value, b.path))\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  return {\n    type: matchedTypes[0].nodeObjectType,\n    resolve: (node, a, b, { fieldName }) => {\n      const fieldValue = node[fieldName]\n\n      if (fieldValue) {\n        return findNode(fieldValue, b.path)\n      } else {\n        return null\n      }\n    },\n  }\n}\n\nexport function findLinkedNode(value, linkedField, path) {\n  let linkedNode\n  // If the field doesn't link to the id, use that for searching.\n  if (linkedField) {\n    linkedNode = getNodes().find(n => n[linkedField] === value)\n    // Else the field is linking to the node's id, the default.\n  } else {\n    linkedNode = getNode(value)\n  }\n\n  if (linkedNode) {\n    if (path) createPageDependency({ path, nodeId: linkedNode.id })\n    return linkedNode\n  }\n  return null\n}\n\nfunction inferFromFieldName(value, selector, types): GraphQLFieldConfig<*, *> {\n  let isArray = false\n  if (_.isArray(value)) {\n    isArray = true\n    // Reduce values to nodes with unique types.\n    value = _.uniqBy(value, v => getNode(v).internal.type)\n  }\n\n  const key = selector.split(`.`).pop()\n  const [, , linkedField] = key.split(`___`)\n\n  const validateLinkedNode = linkedNode => {\n    invariant(\n      linkedNode,\n      oneLine`\n        Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n        There is no corresponding node with the ${linkedField || `id`}\n        field matching: \"${value}\"\n      `\n    )\n  }\n  const validateField = (linkedNode, field) => {\n    invariant(\n      field,\n      oneLine`\n        Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n        There is no corresponding GraphQL type \"${\n          linkedNode.internal.type\n        }\" available\n        to link to this node.\n      `\n    )\n  }\n\n  const findNodeType = node =>\n    types.find(type => type.name === node.internal.type)\n\n  if (isArray) {\n    const linkedNodes = value.map(v => findLinkedNode(v))\n    linkedNodes.forEach(node => validateLinkedNode(node))\n    const fields = linkedNodes.map(node => findNodeType(node))\n    fields.forEach((field, i) => validateField(linkedNodes[i], field))\n\n    let type\n    // If there's more than one type, we'll create a union type.\n    if (fields.length > 1) {\n      const typeName = `Union_${key}_${fields\n        .map(f => f.name)\n        .sort()\n        .join(`__`)}`\n\n      if (unionTypes.has(typeName)) {\n        type = unionTypes.get(typeName)\n      }\n\n      if (!type) {\n        type = new GraphQLUnionType({\n          name: createTypeName(`Union_${key}`),\n          description: `Union interface for the field \"${key}\" for types [${fields\n            .map(f => f.name)\n            .sort()\n            .join(`, `)}]`,\n          types: fields.map(f => f.nodeObjectType),\n          resolveType: data =>\n            fields.find(f => f.name == data.internal.type).nodeObjectType,\n        })\n        unionTypes.set(typeName, type)\n      }\n    } else {\n      type = fields[0].nodeObjectType\n    }\n\n    return {\n      type: new GraphQLList(type),\n      resolve: (node, a, b = {}) => {\n        let fieldValue = node[key]\n        if (fieldValue) {\n          return fieldValue.map(value =>\n            findLinkedNode(value, linkedField, b.path)\n          )\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  const linkedNode = findLinkedNode(value, linkedField)\n  validateLinkedNode(linkedNode)\n  const field = findNodeType(linkedNode)\n  validateField(linkedNode, field)\n  return {\n    type: field.nodeObjectType,\n    resolve: (node, a, b = {}) => {\n      let fieldValue = node[key]\n      if (fieldValue) {\n        const result = findLinkedNode(fieldValue, linkedField, b.path)\n        return result\n      } else {\n        return null\n      }\n    },\n  }\n}\n\ntype inferTypeOptions = {\n  nodes: Object[],\n  types: ProcessedNodeType[],\n  ignoreFields?: string[],\n  selector?: string,\n}\n\nconst EXCLUDE_KEYS = {\n  id: 1,\n  parent: 1,\n  children: 1,\n}\n\n// Call this for the top level node + recursively for each sub-object.\n// E.g. This gets called for Markdown and then for its frontmatter subobject.\nfunction _inferObjectStructureFromNodes(\n  { nodes, types, selector, ignoreFields }: inferTypeOptions,\n  exampleValue: ?Object\n): GraphQLFieldConfigMap<*, *> {\n  const config = store.getState().config\n  const isRoot = !selector\n  const mapping = config && config.mapping\n\n  // Ensure nodes have internal key with object.\n  nodes = nodes.map(n => (n.internal ? n : { ...n, internal: {} }))\n\n  const typeName: string = nodes[0].internal.type\n\n  let resolvedExample: Object =\n    exampleValue != null\n      ? exampleValue\n      : getExampleValues({ nodes, typeName, ignoreFields })\n\n  const inferredFields = {}\n  _.each(resolvedExample, (value, key) => {\n    // Remove fields common to the top-level of all nodes.  We add these\n    // elsewhere so don't need to infer their type.\n    if (value === INVALID_VALUE || (isRoot && EXCLUDE_KEYS[key])) return\n\n    // Several checks to see if a field is pointing to custom type\n    // before we try automatic inference.\n    const nextSelector = selector ? `${selector}.${key}` : key\n    const fieldSelector = `${typeName}.${nextSelector}`\n\n    let fieldName = key\n    let inferredField\n\n    // First check for manual field => type mappings in the site's\n    // gatsby-config.js\n    if (mapping && _.includes(Object.keys(mapping), fieldSelector)) {\n      inferredField = inferFromMapping(value, mapping, fieldSelector, types)\n\n      // Second if the field has a suffix of ___node. We use then the value\n      // (a node id) to find the node and use that node's type as the field\n    } else if (key.includes(`___NODE`)) {\n      ;[fieldName] = key.split(`___`)\n      inferredField = inferFromFieldName(value, nextSelector, types)\n    }\n\n    // Replace unsupported values\n    const sanitizedFieldName = createKey(fieldName)\n\n    // If a pluging has already provided a type for this, don't infer it.\n    if (ignoreFields && ignoreFields.includes(sanitizedFieldName)) {\n      return\n    }\n\n    // Finally our automatic inference of field value type.\n    if (!inferredField) {\n      inferredField = inferGraphQLType({\n        nodes,\n        types,\n        exampleValue: value,\n        selector: nextSelector,\n      })\n    }\n\n    if (!inferredField) return\n\n    // If sanitized field name is different from original field name\n    // add resolve passthrough to reach value using original field name\n    if (sanitizedFieldName !== fieldName) {\n      const {\n        resolve: fieldResolve,\n        ...inferredFieldWithoutResolve\n      } = inferredField\n\n      // Using copy if field as we sometimes have predefined frozen\n      // field definitions and we can't mutate them.\n      inferredField = inferredFieldWithoutResolve\n\n      if (fieldResolve) {\n        // If field has resolver, call it with adjusted resolveInfo\n        // that points to original field name\n        inferredField.resolve = (source, args, context, resolveInfo) =>\n          fieldResolve(source, args, context, {\n            ...resolveInfo,\n            fieldName: fieldName,\n          })\n      } else {\n        inferredField.resolve = source => source[fieldName]\n      }\n    }\n\n    inferredFields[sanitizedFieldName] = inferredField\n  })\n\n  return inferredFields\n}\n\nexport function inferObjectStructureFromNodes(options: inferTypeOptions) {\n  return _inferObjectStructureFromNodes(options, null)\n}\n\nexport function clearUnionTypes() {\n  unionTypes.clear()\n}\n"],"file":"infer-graphql-type.js"}