{"data":{"markdownRemark":{"html":"<p>In this writing, I will write a script in Python that does a convolution on an image and use it to do some cool image processing. </p>\n<p>You will need <code>PIL</code> for this, <code>PIL</code> is an image processing library.</p>\n<h2>Definition</h2>\n<p>Convolution is a process of adding each pixel value of the image to its local neighbors, weighted by the kernel. Kernel is just a matrix that we'll use to change the pixel values.</p>\n<p>Here's a good illustration from <a href=\"http://deeplearning.net/software/theano_versions/dev/tutorial/conv_arithmetic.html\">Deep Learning:</a> </p>\n<p><img src=\"/static/images/convolution.gif?raw=true\" title=\"Convolution on image\"></p>\n<p>You can see the kernel is going over the image and changing the pixel values according to its weights of [[2,0,1],[1,0,0],[0,1,1]].</p>\n<p>Our script will work similar to this. Note that the illustration above has a <strong>padding</strong> of same, meaning that the kernel starts out of the image. By doing this, we can calculate pixel values for pixels at the edge.</p>\n<p>Also, this illustration has a <strong>stride</strong> of 2, meaning that it jumps 2 pixels each time. Not having a stride of 1 will create an image different sized than the original.</p>\n<p>Our script will have a padding of same, a stride of 1, and a kernel size of 3 by 3.</p>\n<p>Here's another good illustration from <a href=\"http://deeplearning.net/software/theano_versions/dev/tutorial/conv_arithmetic.html\">Deep Learning</a> that shows exactly what out convolution function will do:</p>\n<p><img src=\"/static/images/convolution_illustration.gif?raw=true\" title=\"Convolution on image\"></p>\n<h2>Coding</h2>\n<p>First, we need to get the input image and open it with <code>PIL</code>.</p>\n<pre><code class=\"language-python\">im = Image.open(sys.argv[1])\nim_matrix = np.asarray(im)\n</code></pre>\n<p><code>im_matrix</code> is a matrix that contains all the pixel values of the input image.</p>\n<p>Next, we create an empty matrix, which will be the output image.</p>\n<pre><code class=\"language-python\">output_im = np.empty(im_matrix.shape)\n</code></pre>\n<p>Now, we loop through the whole input image and calculate new pixel values for each pixel.</p>\n<pre><code class=\"language-python\">kernel = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]\n\nfor i in range(im_matrix.shape[0]):\n    for j in range(im_matrix.shape[1]):\n        for k in range(im_matrix.shape[2]):\n            output_im[i][j] = getNewPixelValue(im_matrix, i, j, k, kernel)\n</code></pre>\n<p><code>getBlurValue</code> function looks like this:</p>\n<pre><code class=\"language-python\">def getNewPixelValue(im, pixel_y, pixel_x, channel, kernel):\n    pixel_val = 0\n    offset = int(kernel_size/2)\n\n    for i in range(-offset, offset+1, 1):\n        for j in range(-offset, offset+1, 1):\n            if pixel_x + j &#x3C; 0 or pixel_y + i &#x3C; 0:\n                continue\n            if (pixel_x + j &#x3C; im.shape[1] - 1\n                and pixel_y + i &#x3C; im.shape[0] - 1):\n               pixel_val += im[pixel_y + i][pixel_x + j][channel] * kernel[i + offset][j + offset]\n    return max(pixel_val, 0)\n</code></pre>\n<p>The full can be found in my GitHub <a href=\"https://github.com/manlaig/image_convolutions\">repo.</a></p>\n<p>Using the <code>getNewPixelValue</code> function, you can do convolutions on images with different filters, such as sharpening, embossing, and so on.</p>\n<p>Here's an example of convolution done with this function.</p>\n<h2>Blur</h2>\n<p>Using the Gaussian blur filter, we can blur images. The bigger the size of the kernel, the more blurred the image will be.</p>\n<p><img src=\"/static/images/Gaussian5x5.jpg?raw=true\" title=\"3 by 3 Gaussian filter\"></p>\n<p>3x3 filter was not blurring well, so I used this 5x5 filter and got this result.</p>\n<p>Before:</p>\n<p><img src=\"/static/images/nature.jpg?raw=true\" title=\"Before Blurring\"></p>\n<p>After:</p>\n<p><img src=\"/static/images/nature_blurred.jpg?raw=true\" title=\"After Blurring\"></p>\n<h2>Conclusion</h2>\n<p>There's so much to explore with convolutions, image processing and even convolutional neural networks use them. I found them to be very interesting and wanted to write my own and share it with others.</p>","frontmatter":{"date":"November 21, 2018","path":"/convolution","title":"Implementing Image Convolutions in Python"}}},"pageContext":{}}