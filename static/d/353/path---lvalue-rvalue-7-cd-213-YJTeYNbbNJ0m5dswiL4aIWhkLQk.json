{"data":{"markdownRemark":{"html":"<p>Take a look at this code:</p>\n<pre><code>int main()\n{\n    10 = 1;\n}\n</code></pre>\n<p>Weird, right? We never see someone writing code like this. If we run this code, the get:</p>\n<pre><code>error: lvalue required as left operand of assignment\n10 = 1;\n</code></pre>\n<p>So, we can see that we need lvalue as the left operand, the compiler is telling us <code>10</code> is not an lvalue.</p>\n<h3>So, what is lvalue?</h3>\n<p>lvalue was derived from “left value.” Initially, lvalues meant values that can be placed on the left side of an assignment operator. Simply put, it is anything that can be the left operand of assignment. Moreover, <strong>lvalue is any variable or expression that has location in memory of the program.</strong></p>\n<p>That is why we got the above error, it’s because <code>10</code> doesn’t have a location in memory, it’s just a number.</p>\n<p>Also, that is why the below code works: </p>\n<pre><code>int i;\ni = 10;\n</code></pre>\n<p>Here, <code>i</code> is declared, so it has a location in memory, which means i is a lvalue.</p>\n<h3>lvalue reference</h3>\n<p>There are two types of references: lvalue reference and rvalue reference. I will go over rvalue reference later in this writing. But now, what is a lvalue reference?</p>\n<blockquote>\n<p>lvalue reference is a reference to an existing object (object present in the memory of the program)</p>\n</blockquote>\n<h3>What is rvalue?</h3>\n<p>Conversion between rvalue and lvalue</p>\n<p>there is an implicit conversion from lvalue to rvalue in function arguments</p>","frontmatter":{"date":"October 26, 2018","path":"/lvalue-rvalue","title":"lvalues and rvalues in C++"}}},"pageContext":{}}