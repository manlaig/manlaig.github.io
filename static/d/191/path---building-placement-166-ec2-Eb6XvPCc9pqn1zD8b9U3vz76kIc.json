{"data":{"markdownRemark":{"html":"<p>I used to play Red Alert 2 growing up. The game was about placing buildings, raising an army, and conquering the enemy. Implementing a similar building placement in Unity seemed like a fun thing to do. So, I have tried to do something similar as shown below.</p>\n<img src=\"/static/images/example-building-place.jpg\" width=\"260px\" height=\"170px\">\n<p>The above <em><a href=\"https://imgur.com/OmFT6\">image</a></em> shows how Starcraft places buildings.</p>\n<h2>My attempt</h2>\n<p><strong>The goal was to place buildings while checking collisions.</strong> The struggle was that I wanted my implementation to work with any object and I wanted the tiles under to be the <em>same</em> size as the object. That meant I needed to get the area of the object and fill it with tiles that are either green or red.</p>\n<p>After some coding, I came up with a working building placement. Currently, it looks like this:</p>\n<p><img src=\"/static/images/desert.gif?raw=true\" title=\"Placing building in desert\"></p>\n<p>The thing that I think is cool about it is that it doesn't allow placing objects on high-slope areas.</p>\n<h1>Code</h1>\n<h3>BuildingSO (ScriptableObject)</h3>\n<p>I think of <code>ScriptableObject</code>s being like <code>struct</code>s. The cool thing about them is that they <strong>can be stored as assets.</strong> I found <a href=\"https://youtu.be/raQ3iHhE_Kk\">this</a> talk about game architectures using <code>ScriptableObject</code>s to be very interesting.</p>\n<p>For this implementation, spawnable buildings are represented as <code>ScriptableObject</code>s that contains their name, prefab, cost, and icon.</p>\n<pre><code class=\"language-csharp\">[CreateAssetMenu(fileName = \"Building\", menuName = \"Placeable/Building\", order = 1)]\npublic class BuildingSO : ScriptableObject\n{\n    public string objectName = \"Name\";\n    public GameObject buildingPrefab;\n    public float cost;\n    public Icon icon;\n}\n</code></pre>\n<p>If we have define it like this, creating an instance of <code>BuildingSO</code> can be done just like any other Asset! </p>\n<h3>Placing Objects</h3>\n<p>Now that each placeable object is defined, the next thing needed is actually placing the object. Raycasts can be useful in this case.</p>\n<p>.\n.\n.</p>","frontmatter":{"date":"December 08, 2018","path":"/building-placement","title":"RTS Building Placement in Unity"}}},"pageContext":{}}